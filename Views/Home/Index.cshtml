
@model List<WebMVCc.Models.HomeModel>
@{
    Layout = null;
}

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>

    <style type=text/css>
        .buttonInTable {
            background: #FFFFFF;
            font-family: Arial;
            font-size: XX-Large;
            width: 60px;
            height: 60px;
        }
    </style>


</head>
<body>
    <div>
        <table>
            @for (int i = 0; i < 4; i++)
            {
                <tr>
                    @for (int j = 0; j < 4; j++)
                    {
                        <td>
                            <input type="button" id="@(4 * i + j)" onClick="myClick(@(4 * i + j))" class='buttonInTable' />
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
</body>
</html>

<script lang="javascript">
    var xmlHttp;
    var xmlHttpp;
    var indexEmpty;
    var indexPushed;
    var myJsonObject;
    var av = 'ffffff'; var countt;
    window.onload = function () {
        if (window.ActiveXObject) { xmlHttp = new ActiveXObject("Microsoft.XMLHTTP"); xmlHttpp = new ActiveXObject("Microsoft.XMLHTTP"); }
        else if (window.XMLHttpRequest) {
            xmlHttp = new XMLHttpRequest();
            xmlHttpp = new XMLHttpRequest();
        }

        var url = '@Url.Action("ShuffleAction", "Home")';
        xmlHttp.open("Get", url, true);
        xmlHttp.onreadystatechange = getResponseShuffle;
        xmlHttp.send();
    }



    function getResponseShuffle() {
        if (xmlHttp.readyState == 4) {
           // alert(xmlHttp.responseText);
             myJsonObject = JSON.parse( xmlHttp.responseText );

            for (var i = 0; i < 15; i++) {
                var tempButton = document.getElementById(i);
                tempButton.value = myJsonObject[i].Text;
                tempButton.style.backgroundColor = '#' + myJsonObject[i].hexRGB;
            }
            document.getElementById(i).style.visibility = 'hidden';
            indexEmpty = 15;
            document.body.style.backgroundColor = myJsonObject[14].hexRGB;
        }
    }
    function myClick(id) {
        //result.R = (current.R + background.R) / 2;
        //result.G = (current.G + background.G) / 2;
        //result.B = (current.B + background.B) / 2;
        if (Math.abs(id - indexEmpty) == 1 || Math.abs(id - indexEmpty) == 4) {
            countt++;
            var clicked = document.getElementById(id);
            var empty = document.getElementById(indexEmpty);
            av = avg(av, rgbToHex(clicked.style.backgroundColor));
            document.body.style.backgroundColor = av;
            empty.value = clicked.value;
            empty.style.visibility = 'visible';
            clicked.style.visibility = 'hidden';
            empty.style.backgroundColor =clicked.style.backgroundColor;
            indexEmpty = id;
            
        }
        check();

    }
    function check() {
        var count = 1;
        while (count <= 2) {
            if (document.getElementById(count - 1).value == count /**&& document.getElementById(count - 1).tabIndex == count - 1**/)
                count++;
            else return;
        }

        setTimeout(function () {
           
            if (confirm("Game Over. Try Again ?!")) {
                window.location.reload(false);
                @*document.getElementById(indexEmpty).style.visibility = 'visible';
                var urll = '@Url.Action("ShuffleAction", "Home")';
                xmlHttpp.open("Get", urll, true);
                xmlHttpp.onreadystatechange = getResponseShuffle;
                xmlHttpp.send();*@
            }
            else window.parent.close();
        }, 150);
    }
    function rgbToHex(col) {
        if (col.charAt(0) == 'r') {
            col = col.replace('rgb(', '').replace(')', '').split(',');
            var r = parseInt(col[0], 10).toString(16);
            var g = parseInt(col[1], 10).toString(16);
            var b = parseInt(col[2], 10).toString(16);
            r = r.length == 1 ? '0' + r : r; g = g.length == 1 ? '0' + g : g; b = b.length == 1 ? '0' + b : b;
            var colHex = r + g + b;
            return colHex;
        }
    }
    function avg(str1, str2){
        const color1 = parseInt(str1, 16);
        const color2 = parseInt(str2, 16);

        let avgColor = 0;
        for (let i = 0; i < 3; i++) {
            // Split the color components
            comp1 = (color1 >> (8 * i)) & 0xff;
            comp2 = (color2 >> (8 * i)) & 0xff;
            // Calculate the average value for each color component
            let v = parseInt((comp1 + comp2) / 2) << 8 * i;

            // Reconstruct the final value from the color components
            avgColor += parseInt((comp1 + comp2) / 2) << 8 * i;
        }

        return decimalToHex(avgColor, 6);
    }
    function decimalToHex(d, padding) {
        var hex = Number(d).toString(16);
        padding = typeof (padding) === "undefined" || padding === null ? padding = 2 : padding;

        while (hex.length < padding) {
            hex = "0" + hex;
        }

        return hex;
    }
</script>